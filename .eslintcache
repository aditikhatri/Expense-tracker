[{"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\index.js":"1","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\App.js":"2","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\context\\context.js":"3","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\styles.js":"4","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\context\\contextReducer.js":"5","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\index.js":"6","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\InfoCard.jsx":"7","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Details\\Details.jsx":"8","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\Main.jsx":"9","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Snackbar\\Snackbar.jsx":"10","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Snackbar\\styles.js":"11","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\List\\List.jsx":"12","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\Form\\Form.jsx":"13","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\Form\\styles.js":"14","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\utils\\formatDate.js":"15","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\constants\\categories.js":"16","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\List\\styles.js":"17","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Details\\styles.js":"18","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\styles.js":"19","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\useTransactions.js":"20"},{"size":431,"mtime":1618332339242,"results":"21","hashOfConfig":"22"},{"size":1568,"mtime":1619955519023,"results":"23","hashOfConfig":"22"},{"size":2561,"mtime":1619955201972,"results":"24","hashOfConfig":"22"},{"size":589,"mtime":1618334031177,"results":"25","hashOfConfig":"22"},{"size":1107,"mtime":1619955096571,"results":"26","hashOfConfig":"22"},{"size":216,"mtime":1618332339235,"results":"27","hashOfConfig":"22"},{"size":504,"mtime":1619939538867,"results":"28","hashOfConfig":"22"},{"size":1010,"mtime":1619945423687,"results":"29","hashOfConfig":"22"},{"size":1379,"mtime":1619955059786,"results":"30","hashOfConfig":"22"},{"size":835,"mtime":1619939360740,"results":"31","hashOfConfig":"22"},{"size":206,"mtime":1618332339234,"results":"32","hashOfConfig":"22"},{"size":1758,"mtime":1619935788050,"results":"33","hashOfConfig":"22"},{"size":5524,"mtime":1619954717447,"results":"34","hashOfConfig":"22"},{"size":247,"mtime":1618332339225,"results":"35","hashOfConfig":"22"},{"size":317,"mtime":1619937033912,"results":"36","hashOfConfig":"22"},{"size":1693,"mtime":1618332339237,"results":"37","hashOfConfig":"22"},{"size":416,"mtime":1618332339228,"results":"38","hashOfConfig":"22"},{"size":271,"mtime":1619929813451,"results":"39","hashOfConfig":"22"},{"size":535,"mtime":1619929560448,"results":"40","hashOfConfig":"22"},{"size":1209,"mtime":1619946283129,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"x70ywt",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\index.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\App.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\context\\context.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\styles.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\context\\contextReducer.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\index.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\InfoCard.jsx",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Details\\Details.jsx",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\Main.jsx",["85","86","87"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { Card, CardHeader, CardContent, Typography, Grid, Divider } from '@material-ui/core';\r\nimport { useSpeechContext } from '@speechly/react-client';\r\nimport { ExpenseTrackerContext } from '../../context/context';\r\nimport useStyles from './styles';\r\nimport Form from './Form/Form';\r\nimport List from './List/List';\r\nimport InfoCard from '../InfoCard';\r\n\r\nconst ExpenseTracker = () => {\r\n  const classes = useStyles();\r\n  const { balance } = useContext(ExpenseTrackerContext);\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader title=\"Expense Tracker\" subheader=\"Powered by Speechly\" />\r\n      <CardContent>\r\n        <Typography align=\"center\" variant=\"h5\">Total Balance ${balance}</Typography>\r\n        <Typography variant=\"subtitle1\" style={{ lineHeight: '1.5em', marginTop: '20px' }}>\r\n         \r\n          <InfoCard />\r\n\r\n        </Typography>\r\n        <Divider className={classes.divider} />\r\n      \r\n      \r\n        <Form />\r\n         \r\n      </CardContent>\r\n\r\n      <CardContent className={classes.cartContent}>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            \r\n             <List />\r\n\r\n          </Grid>\r\n        </Grid>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ExpenseTracker;\r\n//inside main\r\n\r\n// create infor card, form, list","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Snackbar\\Snackbar.jsx",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Snackbar\\styles.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\List\\List.jsx",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\Form\\Form.jsx",["88"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { useSpeechContext } from '@speechly/react-client';\r\nimport Snackbar from '../../Snackbar/Snackbar';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport { ExpenseTrackerContext } from '../../../context/context';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport useStyles from './styles';\r\n//  type, catagory ,(sec) amount ,date \r\nconst initialState = {\r\n  amount: '',\r\n  category: '',\r\n  type: 'Income',\r\n  date: formatDate(new Date()),\r\n};\r\n\r\nconst NewTransactionForm = () => {\r\n  const classes = useStyles();\r\n  const { addTransaction } = useContext(ExpenseTrackerContext);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const { segment } = useSpeechContext();//segement of voice\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const createTransaction = () => {\r\n    //corner case \r\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n   \r\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: 'Income' });\r\n    } else if (expenseCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: 'Expense' });\r\n    }\r\n//snackbar by default shows\r\n    setOpen(true);\r\n    addTransaction({ ...formData, amount: Number(formData.amount), id: uuidv4() });\r\n    setFormData(initialState);\r\n  };\r\n// take inpput using speachly\r\n  useEffect(() => {\r\n    if (segment) {\r\n      if (segment.intent.intent === 'add_expense') { \r\n        setFormData({ ...formData, type: 'Expense' });// if we say add expense change type to expense\r\n      } else if (segment.intent.intent === 'add_income') {\r\n        setFormData({ ...formData, type: 'Income' });\r\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n        return createTransaction();\r\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n        return setFormData(initialState);\r\n      }\r\n\r\n      segment.entities.forEach((s) => {\r\n        // change only 1 word to upper case and rest lower case\r\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\r\n\r\n        switch (s.type) {\r\n          case 'amount':\r\n            setFormData({ ...formData, amount: s.value });\r\n            break;\r\n          case 'category':\r\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Income', category });\r\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Expense', category });\r\n            }\r\n            break;\r\n          case 'date':\r\n            setFormData({ ...formData, date: s.value });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n// to automatically create tans if data is filled\r\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n        createTransaction();\r\n      }\r\n    }\r\n  }, [segment]);\r\n\r\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n//shows the list of catagories\r\n  return (\r\n    <Grid container spacing={2}>\r\n      {/* snackbar */}\r\n      <Snackbar open={open} setOpen={setOpen} />\r\n      <Grid item xs={12}>\r\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n        {/* see what words we are speaking */}\r\n        {segment ? (\r\n        <div className=\"segment\">\r\n          {segment.words.map((w) => w.value).join(\" \")}\r\n        </div>\r\n      ) : null}\r\n         {/* {isSpeaking ? <BigTranscript /> : 'Start adding transactions'}  */}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          {/* type */}\r\n          <InputLabel>Type</InputLabel>\r\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          {/* catagory */}\r\n          <InputLabel>Category</InputLabel>\r\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\r\n           {/* render catagories dynamically */}\r\n            {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={6}>\r\n        {/* amount */}\r\n        <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        {/* date */}\r\n        <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\r\n      </Grid>\r\n      {/* create button */}\r\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NewTransactionForm;\r\n","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\Form\\styles.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\utils\\formatDate.js",["89"],"export default (date) => {\r\n  const d = new Date(date);\r\n  let month = `${d.getMonth() + 1}`;\r\n  let day = `${d.getDate()}`;\r\n  const year = d.getFullYear();\r\n\r\n  if (month.length < 2) { month = `0${month}`; }\r\n  if (day.length < 2) { day = `0${day}`; }\r\n\r\n  return [year, month, day].join('-');\r\n};\r\n// formate date ","C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\constants\\categories.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\List\\styles.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Details\\styles.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\components\\Main\\styles.js",[],"C:\\Users\\Aditi khatri\\Desktop\\clones\\expense\\src\\useTransactions.js",[],{"ruleId":"90","severity":1,"message":"91","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"94","line":1,"column":27,"nodeType":"92","messageId":"93","endLine":1,"endColumn":36},{"ruleId":"90","severity":1,"message":"95","line":3,"column":10,"nodeType":"92","messageId":"93","endLine":3,"endColumn":26},{"ruleId":"96","severity":1,"message":"97","line":80,"column":6,"nodeType":"98","endLine":80,"endColumn":15,"suggestions":"99"},{"ruleId":"100","severity":1,"message":"101","line":1,"column":1,"nodeType":"102","endLine":11,"endColumn":3},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useSpeechContext' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["103"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"104","fix":"105"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"106","text":"107"},[3305,3314],"[createTransaction, formData, segment]"]